name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: "22"
  TERRAFORM_VERSION: "1.6.0"

jobs:
  test-and-build:
    name: Test & Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run unit tests
        run: npm run test

      - name: Run test coverage
        run: npm run test:coverage

      - name: Build Lambda functions
        run: npm run build

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: success()
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      # Cache build artifacts for deployment jobs
      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: dist/
          key: build-${{ github.sha }}

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.event_name == 'pull_request'

    permissions:
      id-token: write
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      # Restore build artifacts from cache
      - name: Restore build artifacts
        uses: actions/cache@v4
        with:
          path: dist/
          key: build-${{ github.sha }}

      - name: Build Lambda functions (if cache miss)
        run: npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_DEV }}
          aws-region: ${{ vars.AWS_REGION || 'eu-west-2' }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Setup remote state backend
        working-directory: terraform
        run: |
          # Create backend configuration for development (used for PRs)
          cat > backend-config.hcl << EOF
          bucket  = "terraform-state-serverless-todo-api"
          key     = "environments/development/terraform.tfstate"
          region  = "${{ vars.AWS_REGION || 'eu-west-2' }}"
          encrypt = true
          EOF

      - name: Terraform Init
        working-directory: terraform
        run: terraform init -backend-config=backend-config.hcl

      - name: Terraform Plan
        working-directory: terraform
        run: |
          terraform plan \
            -var="environment=development" \
            -var="aws_region=${{ vars.AWS_REGION || 'eu-west-2' }}" \
            -no-color > plan.txt

      - name: Comment PR with plan
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('terraform/plan.txt', 'utf8');
            const body = `## Terraform Plan

            <details>
            <summary>Click to expand plan</summary>

            \`\`\`
            ${plan}
            \`\`\`

            </details>`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development

    permissions:
      id-token: write
      contents: read
      deployments: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      # Restore build artifacts from cache
      - name: Restore build artifacts
        uses: actions/cache@v4
        with:
          path: dist/
          key: build-${{ github.sha }}

      - name: Build Lambda functions (if cache miss)
        run: npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_DEV }}
          aws-region: ${{ vars.AWS_REGION || 'eu-west-2' }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Setup remote state backend
        working-directory: terraform
        run: |
          # Create backend configuration for development
          cat > backend-config.hcl << EOF
          bucket  = "terraform-state-serverless-todo-api"
          key     = "environments/development/terraform.tfstate"
          region  = "${{ vars.AWS_REGION || 'eu-west-2' }}"
          encrypt = true
          EOF

      - name: Terraform Init
        working-directory: terraform
        run: terraform init -backend-config=backend-config.hcl

      - name: Terraform Plan
        id: plan
        working-directory: terraform
        run: |
          terraform plan \
            -var="environment=development" \
            -var="aws_region=${{ vars.AWS_REGION || 'eu-west-2' }}" \
            -out=tfplan
        continue-on-error: true

      - name: Check Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: |
          echo "❌ Terraform plan failed!"
          echo "Please check the plan output above for errors."
          exit 1

      - name: Terraform Apply
        id: apply
        working-directory: terraform
        run: terraform apply -auto-approve tfplan

      - name: Handle Apply Failure
        if: failure() && steps.apply.outcome == 'failure'
        run: |
          echo "❌ Terraform apply failed!"
          echo "Infrastructure may be in an inconsistent state."
          echo "Check the logs above and consider running terraform destroy if needed."
          exit 1

      - name: Record deployment failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'development',
              description: 'Development deployment (failed)',
              auto_merge: false,
              required_contexts: []
            });

            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'failure',
              description: 'Development deployment failed',
              log_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
            });

      - name: Get API Gateway URL and Cognito credentials
        working-directory: terraform
        run: |
          API_URL=$(terraform output -raw api_gateway_url)
          COGNITO_USER_POOL_ID=$(terraform output -raw cognito_user_pool_id)
          COGNITO_CLIENT_ID=$(terraform output -raw cognito_user_pool_client_id)
          echo "API_URL=$API_URL" >> $GITHUB_ENV
          echo "COGNITO_USER_POOL_ID=$COGNITO_USER_POOL_ID" >> $GITHUB_ENV
          echo "COGNITO_CLIENT_ID=$COGNITO_CLIENT_ID" >> $GITHUB_ENV
          echo "Development API deployed at: $API_URL"
          echo "Using Cognito User Pool: $COGNITO_USER_POOL_ID"
          echo "Using Cognito Client ID: $COGNITO_CLIENT_ID"

      - name: Run smoke tests against development API
        run: npm run test:smoke
        env:
          API_BASE_URL: ${{ env.API_URL }}
          COGNITO_USER_POOL_ID: ${{ env.COGNITO_USER_POOL_ID }}
          COGNITO_CLIENT_ID: ${{ env.COGNITO_CLIENT_ID }}

      - name: Create deployment record
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'development',
              description: 'Development deployment',
              auto_merge: false,
              required_contexts: []
            });

            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              environment_url: '${{ env.API_URL }}',
              description: 'Development API verified with smoke tests',
              log_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
            });

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    permissions:
      id-token: write
      contents: read
      deployments: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      # Restore build artifacts from cache
      - name: Restore build artifacts
        uses: actions/cache@v4
        with:
          path: dist/
          key: build-${{ github.sha }}

      - name: Build Lambda functions (if cache miss)
        run: npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_PROD }}
          aws-region: ${{ vars.AWS_REGION || 'eu-west-2' }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Setup remote state backend
        working-directory: terraform
        run: |
          # Create backend configuration for production
          cat > backend-config.hcl << EOF
          bucket  = "terraform-state-serverless-todo-api"
          key     = "environments/production/terraform.tfstate"
          region  = "${{ vars.AWS_REGION || 'eu-west-2' }}"
          encrypt = true
          EOF

      - name: Terraform Init
        working-directory: terraform
        run: terraform init -backend-config=backend-config.hcl

      - name: Terraform Plan
        id: plan-prod
        working-directory: terraform
        run: |
          terraform plan \
            -var="environment=production" \
            -var="aws_region=${{ vars.AWS_REGION || 'eu-west-2' }}" \
            -out=tfplan
        continue-on-error: true

      - name: Check Terraform Plan Status
        if: steps.plan-prod.outcome == 'failure'
        run: |
          echo "❌ Terraform plan failed for production!"
          echo "Please check the plan output above for errors."
          exit 1

      - name: Terraform Apply
        id: apply-prod
        working-directory: terraform
        run: terraform apply -auto-approve tfplan

      - name: Handle Apply Failure
        if: failure() && steps.apply-prod.outcome == 'failure'
        run: |
          echo "❌ Production deployment failed!"
          echo "Infrastructure may be in an inconsistent state."
          echo "Please check the logs and consider manual intervention."
          exit 1

      - name: Record deployment failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              description: 'Production deployment (failed)',
              auto_merge: false,
              required_contexts: []
            });

            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'failure',
              description: 'Production deployment failed',
              log_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
            });

      - name: Get API Gateway URL and Cognito credentials
        working-directory: terraform
        run: |
          API_URL=$(terraform output -raw api_gateway_url)
          COGNITO_USER_POOL_ID=$(terraform output -raw cognito_user_pool_id)
          COGNITO_CLIENT_ID=$(terraform output -raw cognito_user_pool_client_id)
          echo "API_URL=$API_URL" >> $GITHUB_ENV
          echo "COGNITO_USER_POOL_ID=$COGNITO_USER_POOL_ID" >> $GITHUB_ENV
          echo "COGNITO_CLIENT_ID=$COGNITO_CLIENT_ID" >> $GITHUB_ENV
          echo "Production API deployed at: $API_URL"
          echo "Using Cognito User Pool: $COGNITO_USER_POOL_ID"
          echo "Using Cognito Client ID: $COGNITO_CLIENT_ID"

      - name: Run smoke tests against production API
        run: npm run test:smoke
        env:
          API_BASE_URL: ${{ env.API_URL }}
          COGNITO_USER_POOL_ID: ${{ env.COGNITO_USER_POOL_ID }}
          COGNITO_CLIENT_ID: ${{ env.COGNITO_CLIENT_ID }}

      - name: Create deployment record
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              description: 'Production deployment',
              auto_merge: false,
              required_contexts: []
            });

            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              environment_url: '${{ env.API_URL }}',
              description: 'Production API verified with smoke tests',
              log_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
            });
