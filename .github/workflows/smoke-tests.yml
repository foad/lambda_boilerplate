name: Smoke Tests

on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types:
      - completed
    branches: [main]

env:
  NODE_VERSION: "18"

jobs:
  smoke-tests:
    name: Run Smoke Tests
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_PROD }}
          aws-region: ${{ vars.AWS_REGION || 'eu-west-2' }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.0"
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Get API Gateway URL
        working-directory: terraform
        run: |
          API_URL=$(terraform output -raw api_gateway_url)
          echo "API_BASE_URL=$API_URL" >> $GITHUB_ENV
          echo "Running smoke tests against: $API_URL"

      - name: Run smoke tests
        run: npm run test:smoke
        env:
          API_BASE_URL: ${{ env.API_BASE_URL }}

      - name: Report smoke test results
        if: always()
        run: |
          if [ $? -eq 0 ]; then
            echo "✅ All smoke tests passed! Production deployment is healthy."
          else
            echo "❌ Smoke tests failed! Production deployment may have issues."
            exit 1
          fi

      - name: Update deployment status with smoke test results
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            // Get the latest production deployment
            const deployments = await github.rest.repos.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              environment: 'production',
              per_page: 1
            });

            if (deployments.data.length > 0) {
              const deployment = deployments.data[0];
              
              await github.rest.repos.createDeploymentStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: deployment.id,
                state: 'success',
                environment_url: '${{ env.API_BASE_URL }}',
                description: 'Production API verified with smoke tests',
                log_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
              });
            }

  notify-failure:
    name: Notify on Smoke Test Failure
    runs-on: ubuntu-latest
    needs: smoke-tests
    if: failure()

    permissions:
      contents: read

    steps:
      - name: Report failure
        run: |
          echo "🚨 PRODUCTION SMOKE TESTS FAILED 🚨"
          echo "The production deployment may not be working correctly."
          echo "Please investigate the smoke test failures immediately."
          echo ""
          echo "Common issues to check:"
          echo "- API Gateway configuration"
          echo "- Lambda function errors"
          echo "- DynamoDB table access"
          echo "- IAM permissions"

      - name: Update deployment status with failure
        uses: actions/github-script@v7
        with:
          script: |
            // Get the latest production deployment
            const deployments = await github.rest.repos.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              environment: 'production',
              per_page: 1
            });

            if (deployments.data.length > 0) {
              const deployment = deployments.data[0];
              
              await github.rest.repos.createDeploymentStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: deployment.id,
                state: 'error',
                description: 'Production deployment failed smoke tests',
                log_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
              });
            }
